generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "rhel-openssl-3.0.x"]
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  name      String?
  role      Role     @default(ADMIN)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  applications     Application[]
  timesheets       Timesheet[]
  assignments      Assignment[]
  logs             AuditLog[]
  notifications    Notification[]
  teachingAssistant TeachingAssistant?
}

enum Role {
  ADMIN
  COORDINATOR
  TA
}

model Course {
  id        String   @id @default(cuid())
  code      String
  title     String
  term      String
  capacity  Int      @default(3)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  assignments Assignment[]
}

model TeachingAssistant {
  id        String   @id @default(cuid())
  userId    String   @unique
  maxHours  Int      @default(20)
  skills    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user        User         @relation(fields: [userId], references: [id])
  timesheets  Timesheet[]
  assignments Assignment[]
}

model Application {
  id        String    @id @default(cuid())
  userId    String
  status    AppStatus @default(PENDING)
  resumeUrl String?
  statement String?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  user User @relation(fields: [userId], references: [id])
}

enum AppStatus {
  PENDING
  UNDER_REVIEW
  ACCEPTED
  REJECTED
}

model Assignment {
  id        String   @id @default(cuid())
  courseId  String
  taId      String
  hours     Int      @default(10)
  role      String   @default("TA")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  course Course            @relation(fields: [courseId], references: [id])
  ta     TeachingAssistant @relation(fields: [taId], references: [id])
}

model Timesheet {
  id        String     @id @default(cuid())
  taId      String
  weekOf    DateTime
  hours     Int        @default(0)
  notes     String?
  status    TimeStatus @default(SUBMITTED)
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt

  ta TeachingAssistant @relation(fields: [taId], references: [id])
}

enum TimeStatus {
  SUBMITTED
  APPROVED
  REJECTED
}

model Notification {
  id        String   @id @default(cuid())
  userId    String
  kind      String
  title     String
  body      String
  read      Boolean  @default(false)
  createdAt DateTime @default(now())

  user User @relation(fields: [userId], references: [id])
}

model AuditLog {
  id        String   @id @default(cuid())
  actorId   String
  action    String
  target    String?
  meta      String?
  createdAt DateTime @default(now())

  actor User @relation(fields: [actorId], references: [id])
}
